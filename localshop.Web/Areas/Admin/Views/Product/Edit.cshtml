@using localshop.Core.Common
@model ProductViewModel

@{
    ViewBag.Title = "Edit";
}

@section topbar {
    @Html.Action("topbar", "nav", new { header = NavigationHeader.EditProduct + $": {Model.Product.Name.Truncate(100)}" })
}

@section thirdPartyCss {
    <!-- dropify -->
    <link href="~/Assets/admin/libs/dropify/dropify.min.css" rel="stylesheet" type="text/css" />

    <!-- Notification css (Toastr) -->
    <link href="~/Assets/admin/libs/toastr/toastr.min.css" rel="stylesheet" type="text/css" />
}

@section thirdPartyJs {
    <!-- Validation js (Parsleyjs) -->
    <script src="~/Assets/admin/libs/parsleyjs/parsley.min.js"></script>

    <!-- validation init -->
    <script src="~/Assets/admin/js/pages/form-validation.init.js"></script>

    <!-- dropify js -->
    <script src="~/Assets/admin/libs/dropify/dropify.min.js"></script>

    <!-- form-upload init -->
    <script src="~/Assets/admin/js/pages/form-fileupload.init.js"></script>

    <!-- Toastr js -->
    <script src="~/Assets/admin/libs/toastr/toastr.min.js"></script>
    <script src="~/Assets/admin/js/pages/toastr.init.js"></script>

    <script>
        // gt, gte, lt, lte, notequalto extra validators
        var parseRequirement = function (requirement) {
            if (isNaN(+requirement))
                return parseFloat(jQuery(requirement).val());
            else
                return +requirement;
        };

        window.Parsley.addValidator('lt', {
            validateString: function (value, requirement) {
                return parseFloat(value) < parseRequirement(requirement);
            },
            messages: {
                en: 'This value should be a smaller than regular price',
            },
            priority: 32
        });

        window.Parsley.addValidator('decimal', {
            validateString: function (value) {
                return new RegExp('^[0-9]+(,[0-9]{2})?$','g').test(value);
            },
            messages: {
                en: 'This value should be an integer or decimal (,00)',
            }
        });

        $(document).ready(function () {
            toastr.options = {
                "closeButton": false,
                "debug": false,
                "newestOnTop": false,
                "progressBar": false,
                "positionClass": "toast-bottom-right",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "2000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }

            if ('@TempData["success"]' == "Success") {
                toastr['success']("Success!");
            }
        });
    </script>
}

<div class="row">
    <div class="col-12">
        @using (Html.BeginForm("edit", "product", FormMethod.Post, new { role = "form", data_parsley_validate = "", novalidate = "" }))
        {
            <div class="text-danger">
                <div class="row">
                    <div class="col">
                        @Html.ValidationSummary(true)
                    </div>
                </div>
            </div>
            @Html.AntiForgeryToken()
            <div class="card-box">
                <div class="row">
                    <div class="col-12">
                        <h4 class="mt-0 header-title">Product infomation</h4>
                        <p class="text-muted font-14">
                            Add product information below
                        </p>

                        <div class="p-2">
                            <div class="form-horizontal">
                                @{Html.RenderPartial("_Add_Edit_Product", Model.Product);}

                                <div class="form-group row">
                                    @Html.LabelFor(m => m.CategoryId, new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-sm-10">
                                        @Html.DropDownListFor(m => m.CategoryId, new SelectList(Model.Categories, "Id", "Name"), "- Select category -", new { @class = "form-control", required = "" })
                                    </div>
                                </div>

                                <div class="form-group row">
                                    @Html.LabelFor(m => m.StatusId, new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-sm-10">
                                        @Html.DropDownListFor(m => m.StatusId, new SelectList(Model.Statuses, "Id", "Name"), new { @class = "form-control", required = "" })
                                    </div>
                                </div>

                                <div class="form-group mb-0">
                                    <div class="d-flex justify-content-end flex-sm-row flex-column align-items-center">
                                        <div class="custom-control custom-switch d-sm-inline-block align-self-center mr-sm-4 mr-0 mb-sm-0 mb-2">
                                            @Html.CheckBoxFor(m => m.IsActive, new { @class = "custom-control-input" })
                                            <label class="custom-control-label" for="@Html.IdFor(m=>m.IsActive)">Show product ?</label>
                                        </div>
                                        <div class="d-sm-inline-block">
                                            <a href="@Url.Action("index", "product")" class="btn btn-light waves-effect waves-dark">
                                                Cancel
                                            </a>
                                            <button type="reset" class="btn btn-light waves-effect waves-dark">
                                                Reset
                                            </button>
                                            <button class="btn btn-primary waves-effect waves-light" type="submit">
                                                Save Changes
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div> <!-- end row -->
            </div> <!-- end card-box -->

            <div class="card-box">
                <div class="row">
                    <div class="col-12">
                        <h4 class="mt-0 header-title">Product specifications</h4>
                        <p class="text-muted font-14">
                            Add product specifications below
                        </p>
                        <p>Not implemented yet!</p>
                    </div>
                </div> <!-- end row -->
            </div> <!-- end card-box -->
        }
    </div><!-- end col -->
</div>
<!-- end row -->